{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    cart: [],\n    indexOfElement: null\n  },\n  reducers: {\n    changeQuantity(state, action) {\n      // state.cart[action.payload.indexOfElement].quantity += action.payload.quantity;\n      console.log('changeQuantity');\n    },\n\n    addToCart(state, action) {\n      state.cart.push(action.payload);\n      console.log('addToCart');\n    },\n\n    inCart(state, action) {\n      console.log('inCart start');\n      console.log(action.payload.id);\n      console.log(action.payload.variant.id);\n      console.log(state.cart.cart); // for (const el of state.cart) {\n      //   if (state.cart !== [] && el.id === action.payload.id && el.variant.id === action.payload.variant.id) {\n      //     state.indexOfElement = el\n      //   } else state.indexOfElement = 1\n      // }\n\n      console.log('inCart end');\n    },\n\n    removeFromCart(state, action) {//   const index = findProduct(state, action.payload.id);\n      //   check variant\n      //   state.splice(index);\n    },\n\n    changeSize() {}\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","cart","indexOfElement","reducers","changeQuantity","state","action","console","log","addToCart","push","payload","inCart","id","variant","removeFromCart","changeSize","cartActions","actions"],"sources":["C:/Users/micha/Documents/REACT/ABSTRAKT-APP/app/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: { cart: [], indexOfElement: null},\r\n  reducers: {\r\n    changeQuantity(state, action) {\r\n      // state.cart[action.payload.indexOfElement].quantity += action.payload.quantity;\r\n      console.log('changeQuantity')\r\n    },\r\n    addToCart(state, action) {\r\n      state.cart.push(action.payload);\r\n      console.log('addToCart')\r\n    },\r\n    inCart (state, action) {\r\n      console.log('inCart start')\r\n      console.log(action.payload.id)\r\n      console.log(action.payload.variant.id)\r\n      console.log(state.cart.cart)\r\n      // for (const el of state.cart) {\r\n      //   if (state.cart !== [] && el.id === action.payload.id && el.variant.id === action.payload.variant.id) {\r\n      //     state.indexOfElement = el\r\n      //   } else state.indexOfElement = 1\r\n      // }\r\n      console.log('inCart end')\r\n    },\r\n    removeFromCart(state, action) {\r\n      //   const index = findProduct(state, action.payload.id);\r\n      //   check variant\r\n      //   state.splice(index);\r\n    },\r\n    changeSize() {},\r\n  },\r\n});\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice;\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,MADsB;EAE5BC,YAAY,EAAE;IAAEC,IAAI,EAAE,EAAR;IAAYC,cAAc,EAAE;EAA5B,CAFc;EAG5BC,QAAQ,EAAE;IACRC,cAAc,CAACC,KAAD,EAAQC,MAAR,EAAgB;MAC5B;MACAC,OAAO,CAACC,GAAR,CAAY,gBAAZ;IACD,CAJO;;IAKRC,SAAS,CAACJ,KAAD,EAAQC,MAAR,EAAgB;MACvBD,KAAK,CAACJ,IAAN,CAAWS,IAAX,CAAgBJ,MAAM,CAACK,OAAvB;MACAJ,OAAO,CAACC,GAAR,CAAY,WAAZ;IACD,CARO;;IASRI,MAAM,CAAEP,KAAF,EAASC,MAAT,EAAiB;MACrBC,OAAO,CAACC,GAAR,CAAY,cAAZ;MACAD,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACK,OAAP,CAAeE,EAA3B;MACAN,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACK,OAAP,CAAeG,OAAf,CAAuBD,EAAnC;MACAN,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACJ,IAAN,CAAWA,IAAvB,EAJqB,CAKrB;MACA;MACA;MACA;MACA;;MACAM,OAAO,CAACC,GAAR,CAAY,YAAZ;IACD,CApBO;;IAqBRO,cAAc,CAACV,KAAD,EAAQC,MAAR,EAAgB,CAC5B;MACA;MACA;IACD,CAzBO;;IA0BRU,UAAU,GAAG,CAAE;;EA1BP;AAHkB,CAAD,CAA7B;AAiCA,OAAO,MAAMC,WAAW,GAAGnB,SAAS,CAACoB,OAA9B;AAEP,eAAepB,SAAf"},"metadata":{},"sourceType":"module"}