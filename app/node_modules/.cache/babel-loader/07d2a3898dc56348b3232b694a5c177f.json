{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    cart: []\n  },\n  reducers: {\n    changeQuantity(state, action) {\n      state.cart[action.payload.indexOfElement].quantity += action.payload.quantity;\n      console.log('reducer');\n    },\n\n    addToCart(state, action) {\n      state.cart.push(action.payload);\n      console.log('reducer');\n    },\n\n    inCart(state, action) {\n      for (const el of state.cart) {\n        console.log('yep');\n        console.log(`iterable element id: ${el.id}.${el.variant.id}`);\n        console.log(`chosen product id: ${action.payload.id}.${action.payload.variant.id}`); // if (`${el.id}.${el.variant.id}` === `${action.payload.id}.${action.payload.variant.id}`) {\n        //   console.log(state.cart.indexOf(el));\n        // } else console.log(false);\n      }\n    },\n\n    removeFromCart(state, action) {//   const index = findProduct(state, action.payload.id);\n      //   check variant\n      //   state.splice(index);\n    },\n\n    changeSize() {}\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","cart","reducers","changeQuantity","state","action","payload","indexOfElement","quantity","console","log","addToCart","push","inCart","el","id","variant","removeFromCart","changeSize","cartActions","actions"],"sources":["C:/Users/micha/Documents/REACT/ABSTRAKT-APP/app/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: { cart: [] },\r\n  reducers: {\r\n    changeQuantity(state, action) {\r\n      state.cart[action.payload.indexOfElement].quantity += action.payload.quantity;\r\n      console.log('reducer')\r\n    },\r\n    addToCart(state, action) {\r\n      state.cart.push(action.payload);\r\n      console.log('reducer')\r\n    },\r\n    inCart (state, action) {\r\n      for (const el of state.cart) {\r\n        console.log('yep')\r\n        console.log(`iterable element id: ${el.id}.${el.variant.id}`);\r\n        console.log(`chosen product id: ${action.payload.id}.${action.payload.variant.id}`);\r\n        // if (`${el.id}.${el.variant.id}` === `${action.payload.id}.${action.payload.variant.id}`) {\r\n        //   console.log(state.cart.indexOf(el));\r\n        // } else console.log(false);\r\n      }\r\n    },\r\n    removeFromCart(state, action) {\r\n      //   const index = findProduct(state, action.payload.id);\r\n      //   check variant\r\n      //   state.splice(index);\r\n    },\r\n    changeSize() {},\r\n  },\r\n});\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice;\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,MADsB;EAE5BC,YAAY,EAAE;IAAEC,IAAI,EAAE;EAAR,CAFc;EAG5BC,QAAQ,EAAE;IACRC,cAAc,CAACC,KAAD,EAAQC,MAAR,EAAgB;MAC5BD,KAAK,CAACH,IAAN,CAAWI,MAAM,CAACC,OAAP,CAAeC,cAA1B,EAA0CC,QAA1C,IAAsDH,MAAM,CAACC,OAAP,CAAeE,QAArE;MACAC,OAAO,CAACC,GAAR,CAAY,SAAZ;IACD,CAJO;;IAKRC,SAAS,CAACP,KAAD,EAAQC,MAAR,EAAgB;MACvBD,KAAK,CAACH,IAAN,CAAWW,IAAX,CAAgBP,MAAM,CAACC,OAAvB;MACAG,OAAO,CAACC,GAAR,CAAY,SAAZ;IACD,CARO;;IASRG,MAAM,CAAET,KAAF,EAASC,MAAT,EAAiB;MACrB,KAAK,MAAMS,EAAX,IAAiBV,KAAK,CAACH,IAAvB,EAA6B;QAC3BQ,OAAO,CAACC,GAAR,CAAY,KAAZ;QACAD,OAAO,CAACC,GAAR,CAAa,wBAAuBI,EAAE,CAACC,EAAG,IAAGD,EAAE,CAACE,OAAH,CAAWD,EAAG,EAA3D;QACAN,OAAO,CAACC,GAAR,CAAa,sBAAqBL,MAAM,CAACC,OAAP,CAAeS,EAAG,IAAGV,MAAM,CAACC,OAAP,CAAeU,OAAf,CAAuBD,EAAG,EAAjF,EAH2B,CAI3B;QACA;QACA;MACD;IACF,CAlBO;;IAmBRE,cAAc,CAACb,KAAD,EAAQC,MAAR,EAAgB,CAC5B;MACA;MACA;IACD,CAvBO;;IAwBRa,UAAU,GAAG,CAAE;;EAxBP;AAHkB,CAAD,CAA7B;AA+BA,OAAO,MAAMC,WAAW,GAAGrB,SAAS,CAACsB,OAA9B;AAEP,eAAetB,SAAf"},"metadata":{},"sourceType":"module"}